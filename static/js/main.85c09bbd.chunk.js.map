{"version":3,"sources":["App.js","actions/index.js","types.js","reducers/index.js","serviceWorker.js","index.js","reminder.png"],"names":["App","state","text","date","Date","render_Reminder","reminders","props","className","map","reminder","key","id","moment","fromNow","onClick","remove_reminder","console","log","this","src","logo","type","placeholder","value","onChange","e","setState","target","selected","onSelect","handleSelect","showTimeSelect","timeFormat","dateFormat","timeCaption","add_reminder","clear_reminder","Component","connect","action","read_cookie","Math","random","bake_cookie","filter","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"4QAQMA,E,2MACJC,MAAQ,CACNC,KAAK,GACLC,KAAM,IAAIC,M,EAEZC,gBAAkB,WAAM,IACfC,EAAW,EAAKC,MAAhBD,UACP,OACE,wBAAIE,UAAU,cAEXF,EAAUG,KAAI,SAAAC,GACb,OACE,wBAAIC,IAAKD,EAASE,GAAIJ,UAAU,mBAC9B,6BAAME,EAASR,MACf,6BAAMW,IAAO,IAAIT,KAAKM,EAASP,OAAOW,WACtC,yBAAKN,UAAU,2BAA2BO,QAAS,kBAAK,EAAKR,MAAMS,gBAAgBN,EAASE,MAA5F,W,wEAWF,IAAD,OAEP,OADAK,QAAQC,IAAIC,KAAKZ,OAEf,yBAAKC,UAAU,OACb,yBAAKY,IAAKC,MACV,yBAAKb,UAAU,kBACb,mDAEF,2BAAOA,UAAU,eAAec,KAAK,OAAOC,YAAY,yBACxDC,MAAOL,KAAKlB,MAAMC,KACjBuB,SAAU,SAACC,GAAD,OAAM,EAAKC,SAAS,CAACzB,KAAKwB,EAAEE,OAAOJ,WAE9C,6BACC,kBAAC,IAAD,CACGhB,UAAU,eACVgB,MAAOL,KAAKlB,MAAME,KAClB0B,SAAUV,KAAKlB,MAAME,KACrB2B,SAAUX,KAAKY,aACfN,SAAU,SAACtB,GAAU,EAAKwB,SAAS,CAACxB,KAAKA,KACzC6B,gBAAc,EACdC,WAAW,QACXC,WAAW,uBACXC,YAAY,SAEhB,6BACA,6BACChB,KAAKd,kBACN,6BACA,4BAAQU,QAAS,WACf,EAAKR,MAAM6B,aAAa,EAAKnC,MAAMC,KAAO,EAAKD,MAAME,MACrD,EAAKwB,SAAS,CAACzB,KAAK,GAAKC,KAAK,MAC3BK,UAAU,6BAHf,gBAIA,4BACCO,QAAS,kBAAM,EAAKR,MAAM8B,kBAC3B7B,UAAU,4BAFV,uB,GA1DU8B,aA8EHC,eAAQ,SAAAtC,GACrB,MAAM,CACJK,UAAYL,KAEZ,CACFmC,aC1F0B,SAAClC,EAAKC,GAC9B,IAAMqC,EAAQ,CACVlB,KCHkB,eDIlBpB,OACAC,QAGJ,OADAc,QAAQC,IAAI,MAAOsB,GACZA,GDoFTxB,gBClF6B,SAACJ,GAC5B,IAAM4B,EAAQ,CACVlB,KCXqB,kBDYrBV,GAAGA,GAGP,OADAK,QAAQC,IAAI,SAAWsB,GAChBA,GD6ETH,eC3E4B,WAI1B,MAHc,CACVf,KClBqB,qBFoFdiB,CAQXvC,G,wBGnEWM,EAzBE,WAAuB,IAAtBL,EAAqB,uDAAf,GAAKuC,EAAU,uCAC/BlC,EAAU,KAEd,OADEL,EAAMwC,sBAAY,aDJE,iBCKnBD,EAAOlB,MACRhB,EAAU,GAAD,mBAAKL,GAAL,CAAa,CAACC,KAAMsC,EAAOtC,KAAOC,KAAMqC,EAAOrC,KAAOS,GAAI8B,KAAKC,YACxEC,sBAAY,YAActC,GAC1BW,QAAQC,IAAI,eAAgBZ,GACrBA,GDRgB,oBCUhBkC,EAAOlB,MACfhB,EAAUL,EAAM4C,QAAO,SAAAnC,GAAQ,OAAIA,EAASE,KAAO4B,EAAO5B,MAC1DgC,sBAAY,YAActC,GAC1BW,QAAQC,IAAI,eAAgBZ,GACrBA,GDbiB,oBCehBkC,EAAOlB,MACdhB,EAAU,GACVsC,sBAAY,YAActC,GAC1BW,QAAQC,IAAI,eAAgBZ,GACrBA,GAGEL,G,OCZK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAMC,YAAY9C,GAExB+C,IAASC,OAAQ,kBAAC,IAAD,CAAUH,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,MAAzB,KAA8CI,SAASC,eAAe,SDqHjF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,wCEnInBC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.85c09bbd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {add_reminder , remove_reminder , clear_reminder} from './actions/index.js';\nimport {connect} from 'react-redux';\nimport moment from 'moment';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport logo from './reminder.png'\nimport './index.css';\nclass App extends Component {\n  state = { \n    text:'',\n    date: new Date()\n   }\n  render_Reminder = () =>{\n    const {reminders}=this.props;\n    return(\n      <ul className=\"list-group\">\n       {\n         reminders.map(reminder =>{\n          return(\n            <li key={reminder.id} className=\"list-group-item\">\n              <div>{reminder.text}</div>\n              <div>{moment(new Date(reminder.date)).fromNow()}</div> \n              <div className=\"closeIcon btn btn-danger\" onClick={() =>this.props.remove_reminder(reminder.id)}>X</div>\n            </li>\n          )\n        })\n       }\n      </ul>\n    )\n    \n  }\n\n\n  render() { \n    console.log(this.props)\n    return ( \n      <div className=\"App\">\n        <img src={logo} />\n        <div className=\"reminder-title\">\n          <h2>What Should U Do ?</h2>\n        </div>\n        <input className=\"form-control\" type=\"text\" placeholder=\"Enter What U Think...?\" \n        value={this.state.text}\n         onChange={(e)=> this.setState({text:e.target.value})}\n        />\n        <br/>\n         <DatePicker\n            className=\"form-control\"\n            value={this.state.date}\n            selected={this.state.date}\n            onSelect={this.handleSelect} //when day is clicked\n            onChange={(date) => {this.setState({date:date})}} //only when value has changed\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            dateFormat=\"MMMM d, yyyy h:mm aa\"\n            timeCaption=\"Time\"\n        />\n        <br/>\n        <br/>\n        {this.render_Reminder()}\n        <br/>\n        <button onClick={() =>{\n          this.props.add_reminder(this.state.text , this.state.date)\n          this.setState({text:'' , date:''})\n          }} className=\"btn btn-primary btn-block\">Add Reminder</button>\n        <button \n         onClick={() => this.props.clear_reminder()}\n        className=\"btn btn-danger btn-block\">Clear Reminder</button>\n      </div>\n     );\n  }\n}\n\n//function mapDispatchToProps(dispatch) {\n  //return {\n    //add_reminder : () =>dispatch(add_reminder())\n  //}\n//} toute cette fonction , on a deplacÃ© par {add_reminder} dans export connect \n \n//function mapStateToProps (state){\n  //return{\n   // reminders : state\n  //}\n//}   sera deplacer par state dans export connect\n \nexport default connect(state =>{\n  return{\n    reminders : state\n  }\n} , {\n  add_reminder,\n  remove_reminder,\n  clear_reminder\n}) (App);\n","import {ADD_REMINDER , REMOVE_REMINDER , CLEAR_REMINDERS} from '../types'\r\nexport const add_reminder = (text,date) =>{\r\n    const action ={\r\n        type: ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    console.log(\"add\", action)\r\n    return action\r\n} \r\nexport const remove_reminder = (id)=>{\r\n    const action ={\r\n        type: REMOVE_REMINDER,\r\n        id:id\r\n    }\r\n    console.log(\"remove\" , action)\r\n    return action\r\n}\r\nexport const clear_reminder = () =>{\r\n    const action ={\r\n        type : CLEAR_REMINDERS\r\n    }\r\n    return action\r\n}","export const ADD_REMINDER=\"ADD_REMINDER\"\r\nexport const REMOVE_REMINDER=\"REMOVE_REMINDER\"\r\nexport const CLEAR_REMINDERS=\"CLEAR_REMINDERS\"","import {ADD_REMINDER , REMOVE_REMINDER , CLEAR_REMINDERS} from '../types'\r\nimport { bake_cookie, read_cookie } from 'sfcookies'\r\nconst reminders =(state=[] , action) =>{\r\n    let reminders=null;\r\n      state=read_cookie('reminders')\r\n    if(action.type === ADD_REMINDER){\r\n      reminders=[...state , {text: action.text , date: action.date , id: Math.random()}] \r\n      bake_cookie('reminders' , reminders) \r\n      console.log(\"from reducer\", reminders)\r\n      return reminders;\r\n    } \r\n    else if (action.type === REMOVE_REMINDER){\r\n     reminders=state.filter(reminder => reminder.id !== action.id)\r\n     bake_cookie('reminders' , reminders) \r\n     console.log(\"from reducer\", reminders) \r\n     return reminders;\r\n    }\r\n    else if (action.type === CLEAR_REMINDERS){\r\n      reminders=[];\r\n      bake_cookie('reminders' , reminders) \r\n      console.log(\"from reducer\", reminders) \r\n      return reminders;\r\n     }\r\n    else{\r\n        return state;\r\n    }\r\n}\r\nexport default reminders;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport reminders from './reducers'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store=createStore(reminders);\n\nReactDOM.render( <Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reminder.2c51f81e.png\";"],"sourceRoot":""}